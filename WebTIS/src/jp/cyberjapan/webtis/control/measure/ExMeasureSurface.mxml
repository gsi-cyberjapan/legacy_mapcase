<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="http://openscales.org"
			   implements="org.openscales.core.control.IControl"
			   toolTip="{this.toolTitle}"
			   icon="{_btnPolygon}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()">
	
	<fx:Script>
		<![CDATA[
			import org.openscales.core.Map;
			import org.openscales.core.basetypes.maps.HashMap;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.handler.feature.draw.AbstractDrawHandler;
			import org.openscales.core.handler.feature.draw.DrawPolygonHandler;
			import org.openscales.core.handler.mouse.DragHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.measure.Surface;
			import org.openscales.geometry.basetypes.Pixel;
			import jp.cyberjapan.webtis.control.measure.ExSurface;
			
			[Bindable]
			public var toolTitle:String = Catalog.getLocalizationForKey('MeasureBar.surfacetooltip');
			
			[Bindable]
			private var _alpha:Number=0.3;
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/Icons-02.png")]
			private var _btnPolygon:Class;
			private var _active:Boolean = false;
			// EX改修箇所 アクセス修飾子をprivateからpublicに変更、クラスを拡張クラスに変更
			public var _handler:ExSurface = new ExSurface();
			
			public function get displaySystem():String
			{
				if(this._handler){
					return this._handler.displaySystem;
				}
				else{
					return null;
				}
			}
			
			public function set displaySystem(value:String):void
			{
				if(this._handler)
					this._handler.displaySystem = value;
			}
			
			public function get accuracies():HashMap
			{
				if(this._handler){
					return this._handler.accuracies;
				}else{
					return null;
				}
			}
			
			public function set accuracies(value:HashMap):void
			{
				if(this._handler)
					this._handler.accuracies = value;
			}
			
			/**
			 * Flag for activating and deactivating the component
			 * @default false;
			 */
			[Bindable]
			public function get active():Boolean{
				return _active;
			}
			
			public function set active(value:Boolean):void{
				if(_active == value)
					return;
				_active = value;
				_handler.active = value;
			}
			
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				return _handler.map;
			}
			public function set map(value:Map):void{
				if(_handler.map) {
					_handler.map.removeEventListener(DrawingEvent.CHANGE_ACTIVE_HANDLER, onChangeActiveHandler);
				}
				_handler.map = value;
				_handler.map.addEventListener(DrawingEvent.CHANGE_ACTIVE_HANDLER, onChangeActiveHandler);
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}

			
			/**
			 * On button click, dispatch a DrawingEvent.CHANGE_ACTIVE_HANDLER event
			 */
			public function onClick():void{
				if(!this._active){
					var evt1:DrawingEvent = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
					evt1.activeHandler = this.id;
					_handler.map.dispatchEvent(evt1);
				/*	// hamas : 13.09.12 修正
					var evt2:DrawingEvent = new DrawingEvent(DrawingEvent.DRAW_HANDLER_ACTIVATED);
					evt2.activeHandler = null;
					_handler.map.dispatchEvent(evt2);
				*/	
					this.active = true;
					this.activate();
				}else{
					var evt3:DrawingEvent = new DrawingEvent(DrawingEvent.DRAW_HANDLER_DESACTIVATED);
					evt3.activeHandler = null;
					_handler.map.dispatchEvent(evt3);
				
					this.active = false;
					this.disactivate();
					_handler.map.doubleclickZoomEnabled = true;
				}
			}
			
			/**
			 * Check the handler when a DrawingEvent.CHANGE_ACTIVE_HANDLER event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				if(_active && this.id != evt.activeHandler)
				{
					this.active = false;
				}
				this.disactivate();
			}
			
			
			public function onMapLanguageChange(event:I18NEvent):void{
				this.toolTitle=Catalog.getLocalizationForKey("MeasureBar.surfacetooltip");
			}
			
			public function draw():void{
				this.invalidateDisplayList();
			}
			
			public function destroy():void{}
			
			
			/**
			 * To activate or disactivate the handler
			 */
			private function activate():void{
				
				_handler.active = true;
				_alpha = 1;
				_handler.map.doubleclickZoomEnabled = false;
			}
			private function disactivate():void{
				
				_handler.active = false;
				_alpha = 0.3;
			}
		]]>
	</fx:Script>			
</os:IconButton>
