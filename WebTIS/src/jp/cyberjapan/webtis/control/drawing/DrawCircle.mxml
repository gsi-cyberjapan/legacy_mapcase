<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   implements="org.openscales.core.control.IControl"
			   toolTip="{this.tooltip}"
			   icon="{_btnCircle}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import flash.events.MouseEvent;
			import jp.cyberjapan.webtis.control.drawing.DrawCircleForm;
			import jp.cyberjapan.webtis.handler.feature.draw.DrawCircleHandler;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.handler.feature.draw.AbstractDrawHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.Map;
			import org.openscales.core.style.Style;
			import org.openscales.geometry.basetypes.Pixel;
			import spark.components.TitleWindow;
			
			/** アイコンの透明度 */
			[Bindable]
			private var _alpha:Number = 0.3;
			
			[Bindable]
			private var tooltip:String = Catalog.getLocalizationForKey('drawing.circle');
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/circle.png")]
			private var _btnCircle:Class;
			
			private var _active:Boolean = true;
			private var _handler:AbstractDrawHandler= new DrawCircleHandler();
			private var _isClick:Boolean = false;
			private var _drawingMode:String;
			
			private var form:DrawCircleForm;
			public var myTitleWindow:TitleWindow = new TitleWindow();
			
			
			/**
			 * Indicates for Drawing mode
			 * multiple : tools are in the LayerSwitcher
			 * unique : tools are in the DrawingToolbar
			 */
			[Bindable]
			public function get drawingMode():String{
				
				return _drawingMode;
			}
			
			public function set drawingMode(value:String):void{
				_drawingMode = value;
			}
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(! _active){
					_handler.active = false;
				}
			}
			
			/**
			 * Drawing style of the polygon
			 */
			public function get style():Style{
				
				return (this._handler as DrawCircleHandler).style;
			}
			public function set style(value:Style):void{
				
				(this._handler as DrawCircleHandler).style = value;
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return _handler.map;
			}
			public function set map(value:Map):void{
				
				_handler.map = value;
				_handler.map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.DELETE_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
				_handler.map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be drawn on
			 */
			[Bindable]
			public function get target():VectorLayer{
				
				return _handler.drawLayer;
			}
			public function set target(value:VectorLayer):void{
				this.disactivate();
				_handler.drawLayer = value;
			}
			
			[Bindable]
			public function get handler():AbstractDrawHandler{
				return _handler;
			}
			public function set handler(value:AbstractDrawHandler):void{
				//this.disactivate();
				_handler = value;
			}
			
			[Bindable]
			public function get isClick():Boolean{
				return _isClick;
			}
			public function set isClick(value:Boolean):void{
				//this.disactivate();
				_isClick = value;
			}
			
			/**
			 * To activate or disactivate the handler
			 */
			public function activate(isFixed:Boolean=false):void{
				(this._handler as DrawCircleHandler).isFixed = isFixed;
				_handler.active = true;
				_alpha = 1;
				// 描画モード中はマップのダブルクリックイベントを無効にする
				_handler.map.doubleclickZoomEnabled = false;
				_handler.map.doubleClickEnabled = false;

				// 13.10.31 hamas : unfixed drawing
				if ( !(this._handler as DrawCircleHandler).isFixed ) {
					_handler.map.mouseNavigationEnabled = false;
				}
			}
			
			public function disactivate():void{
				
				if (_handler && _handler.map)
				{
					var evt:DrawingEvent = new DrawingEvent(DrawingEvent.DRAW_HANDLER_DESACTIVATED);
					_handler.map.dispatchEvent(evt);
					
					_handler.map.doubleclickZoomEnabled = true;
					_handler.map.doubleClickEnabled = true;
					
					// 13.10.31 hamas : unfixed drawing
					if ( !(this._handler as DrawCircleHandler).isFixed ) {
						_handler.map.mouseNavigationEnabled = true;
						_handler.map.panNavigationEnabled = true;
						_handler.map.zoomNavigationEnabled = true;
					}
				}				
				_handler.active = false;
				_alpha = 0.3;
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.DRAW_HANDLER_ACTIVATED event
			 */
			public function onClick():void
			{
				// すでに円描画がアクティブ
				if (this._handler.active){
				//if(this.alpha == 1){
					// 描きかけの円は削除
					(this._handler as DrawCircleHandler).clearTemporaryCircle();
					// 終了処理
					disactivate();
					return;
				}
				
				// 円描画方法選択画面の表示
				myTitleWindow = new TitleWindow();
				myTitleWindow.title = Catalog.getLocalizationForKey("drawing.selectDrawCircle");
				myTitleWindow.addEventListener(FlexEvent.CREATION_COMPLETE, this.onPopUpCreationComplete);
				
				// Call the method to add the Button control to the 
				// TitleWindow container.
				populateWindow();
				
				// place at the center
				myTitleWindow.x = (this.map.width/2)-(this.form.width/2);
				myTitleWindow.y = (this.map.height/2)-(this.form.height/2);
				
				// Use the PopUpManager to display the TitleWindow container.
				PopUpManager.addPopUp(myTitleWindow, this, true);
			}
			
			/**
			 * ドラッグ円描画
			 */
			public function drawCircle():void
			{
				if(!this.target)
					return;
				
				if (this._handler.active && (this._handler as DrawCircleHandler).isFixed)
				{
					// 固定円→ドラッグなのでいったんリセット
					disactivate();
				}
				
				this._isClick = true;
				var evt:DrawingEvent;
				evt = new DrawingEvent(DrawingEvent.DRAW_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				
				// Disactive mesure tools components
				evt = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				
				// Active this component
				activate();
			}
			
			/**
			 * 固定円描画
			 * @param	radius
			 */
			public function drawFixedCircle(radius:Number):void
			{
				if(!this.target)
					return;
				
				if (this._handler.active && !(this._handler as DrawCircleHandler).isFixed)
				{
					// ドラッグ→固定円なのでいったんリセット
					disactivate();
				}
				
				this._isClick = true;
				(this._handler as DrawCircleHandler).radius = radius;
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.DRAW_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				
				// Disactive mesure tools components
				evt = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				
				// Active this component
				activate(true);
			}
			
			/**
			 * 描画方法選択画面の初期設定
			 * @param	e
			 */
			private function onPopUpCreationComplete(e:Event):void
			{
				myTitleWindow.closeButton.addEventListener(MouseEvent.CLICK, this.closePopUp);				
				// ×ボタンで閉じたとき
				myTitleWindow.addEventListener(CloseEvent.CLOSE, this.cancelDrawing);
			}
	
			/**
			 * Close the PopUp window
			 */
			public function closePopUp(event:MouseEvent = null):void
			{
				// close the pop up file
				PopUpManager.removePopUp(myTitleWindow);
			}
			
			/**
			 * ×ボタンで描画方法選択画面を閉じたときのイベントハンドラ
			 * @param	e
			 */
			private function cancelDrawing(e:CloseEvent):void 
			{
				disactivate();
			}
			
			/**
			 * Function that fill the popUp
			 */
			private function populateWindow():void 
			{	
				form = new DrawCircleForm();
				form.drawCircle = this;
				myTitleWindow.addElement(form); 
			}

			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(this._handler.active && !this._isClick)
				{
					if(!(this._handler as DrawCircleHandler).newFeature)
						(this._handler as DrawCircleHandler).clearTemporaryCircle();
					disactivate();
				}
				else
					this._isClick = false;
			}
			
			/**
			 * Update the target on active layer changed
			 */
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.drawingMode == 'unique')
				{
					if(this._handler.active)
					{
						//if(!(this._handler as DrawCircleHandler).newFeature)
							//(this._handler as DrawCircleHandler).drawFinalPoly();
						disactivate();
						_handler.map.mouseNavigationEnabled = true;
						_handler.map.panNavigationEnabled = true;
						_handler.map.zoomNavigationEnabled = true;
						_handler.map.keyboardNavigationEnabled = true;
					}
					this.target = evt.layer;
					
					if(!evt.layer || !evt.layer.editable) {
						this.buttonMode = false;
						this.useHandCursor = false;
						this.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					} else {
						this.buttonMode = true;
						this.useHandCursor = true;
						this.toolTip = Catalog.getLocalizationForKey('drawing.circle');
					}
				}
			}
			
			/**
			 * Update texts on map language changed
			 */
			public function onMapLanguageChange(event:I18NEvent):void{
				
				this.tooltip = Catalog.getLocalizationForKey('drawing.circle');
			}
			
			// Unused functions
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
