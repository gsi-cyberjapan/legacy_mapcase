<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   implements="org.openscales.core.control.IControl"
			   toolTip="{this.tooltip}"
			   icon="{_btnSelect}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import jp.cyberjapan.webtis.api.MapAPI;
			import mx.controls.Alert;
			import mx.formatters.NumberFormatter;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.LabelFeature;
			import org.openscales.core.feature.LineStringFeature;
			import org.openscales.core.feature.MultiLineStringFeature;
			import org.openscales.core.feature.MultiPointFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.feature.PolygonFeature;
			//import org.openscales.core.handler.feature.draw.EditFeaturesHandler;
			import org.openscales.core.handler.feature.SelectFeaturesHandler;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.Map;
			import org.openscales.core.style.font.Font;
			import org.openscales.core.style.Style;
			import org.openscales.core.style.symbolizer.LineSymbolizer;
			import org.openscales.core.style.symbolizer.PolygonSymbolizer;
			import org.openscales.core.style.symbolizer.TextSymbolizer;
			import org.openscales.core.utils.Util;
			import org.openscales.fx.control.drawing.popup.EditFeaturesPopupRenderer;
			import org.openscales.fx.control.layer.LayerManager;
			import org.openscales.fx.FxMap;
			import org.openscales.fx.popup.FxPopup;
			import org.openscales.fx.popup.renderer.FxPopupRenderer;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			import org.openscales.geometry.basetypes.Unit;
			import org.openscales.geometry.Geometry;
			import org.openscales.geometry.LinearRing;
			import org.openscales.geometry.LineString;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.Polygon;
			//import org.openscales.fx.control.drawing.popup.EditFeatureAttributes;	// 存在しない？ビルドできないためコメントアウト
			import jp.cyberjapan.webtis.handler.feature.draw.ExEditFeaturesHandler;
			
			[Bindable]
			private var _alpha:Number = 0.3;
			
			[Bindable]
			private var tooltip:String = Catalog.getLocalizationForKey('drawing.displayFeatureInfo');
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/dispinfo.png")]
			private var _btnSelect:Class;
			
			private var _active:Boolean = true;
			private var _clickout:Boolean = true;
			private var _hover:Boolean = false;
			private var _toggle:Boolean = false;
			private var _map:Map;
			private var _fxMap:FxMap;
			private var _target:VectorLayer;
			private var _handler:ExEditFeaturesHandler = null;
			private var _previousSelectFeaturesHandler:SelectFeaturesHandler = null;
			private var _isClick:Boolean = false;
			private var _fxpopup:FxPopup;
			private var _drawingMode:String;
			
			public static const PRECISION:Number = 3;	// 精度
			
			/**
			 * Indicates for Drawing mode
			 * multiple : tools are in the LayerSwitcher
			 * unique : tools are in the DrawingToolbar
			 */
			[Bindable]
			public function get drawingMode():String{
				
				return _drawingMode;
			}
			
			public function set drawingMode(value:String):void{
				_drawingMode = value;
			}
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(this._handler && !_active){
					_handler.active = false;
				}
			}
			
			/**
			 * If true, a feature is unselected by clicking out of it
			 * @default true;
			 */
			public function get clickout():Boolean{
				
				return this._clickout;
			}
			public function set clickout(value:Boolean):void{
				
				this._clickout = value;
			}
			
			/**
			 * If true, a feature is selected on mouseover
			 * @default false;
			 */
			public function get hover():Boolean{
				
				return this._hover;
			}
			public function set hover(value:Boolean):void{
				
				this._hover = value;
			}
			
			/**
			 * If true, a selected feature is unselected by clicking on it
			 * @default false;
			 */
			public function get toggle():Boolean{
				
				return this._toggle;
			}
			public function set toggle(value:Boolean):void{
				
				this._toggle = value;
			}
			
			public function get fxpopup():FxPopup{
				
				return this._fxpopup;
			}
			public function set fxpopup(value:FxPopup):void{
				
				this._fxpopup = value;
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return this._map;
			}
			
			public function set map(value:Map):void{
				this._map = value;
				this._map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.DELETE_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				this._map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
				this._map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
				
			}
			
			/**
			 * FxMap controled by this control
			 */
			public function get fxMap():FxMap{
				
				return this._fxMap;
			}
			
			public function set fxMap(value:FxMap):void{
				this._fxMap = value;
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be selected
			 */
			public function get target():VectorLayer{
				
				return this._target;
			}
			public function set target(value:VectorLayer):void{
				
				this._target = value;
			}
			
			/**
			 * Update the features to edit when a FeatureEvent.FEATURE_SELECTED 
			 * event occured
			 */
			private function onFeatureSelected(evt:FeatureEvent):void
			{
				if(evt.feature.layer == this.target)
				{
					// 選択したフィーチャの情報（位置、長さ、面積）を表示
					
					var geometry:Geometry = evt.feature.geometry.clone();
					geometry.transform(MapAPI.DISPLAY_PROJECTION);	// EPSG:4326
					
					var point:org.openscales.geometry.Point;
					var nf:NumberFormatter = new NumberFormatter();
					nf.precision = PRECISION;// 6;
					var unit:String = "";		// 単位（距離、面積）
					var caption:String = "";
					
					if (evt.feature is LabelFeature) {
						// ラベル -> 位置
						
						point = geometry.toVertices()[0];
						caption = "緯度：" + nf.format(point.x) + "　経度：" + nf.format(point.y);
						
					} else if (evt.feature is PointFeature/* || evt.feature is MultiPointFeature*/) {
						// 点 -> 位置
						
						point = geometry.toVertices()[0];
						caption = "緯度：" + nf.format(point.x) + "　経度：" + nf.format(point.y);
						
					} else if (evt.feature is LineStringFeature/* || evt.feature is MultiLineStringFeature*/) {
						// 線 -> 長さ（距離）
						
						/*
						// 位置
						caption += "位置：\n";
						for each (var lPoint:org.openscales.geometry.Point in geometry.toVertices())
						{
							caption = caption + "緯度：" + nf.format(lPoint.x) + "　経度：" + nf.format(lPoint.y) + "\n";
						}
						caption += "\n";
						*/
						
						// 距離
						caption += "距離：\n";
						var dist:String;
						var tmpDist:Number = (evt.feature as LineStringFeature).lineString.geodesicLength;
						if (tmpDist >= 1000) {
							// 単位をkmに変更
							tmpDist /= 1000;
							unit = Unit.KILOMETER;
							dist = Util.truncate(tmpDist, PRECISION);
						}
						else {
							// m
							unit = Unit.METER;
							dist = Util.truncate(tmpDist, PRECISION);
						}
						caption = caption + dist + " " + unit;
						
					} else {
						// 面、円 -> 面積
						
						/*
						// 位置
						caption += "位置：\n";
						for each (var pPoint:org.openscales.geometry.Point in geometry.toVertices())
						{
							caption = caption + "緯度：" + nf.format(pPoint.x) + "　経度：" + nf.format(pPoint.y) + "\n";
						}
						caption += "\n";
						*/
						
						// 面積
						caption += "面積：\n";
						var area:String;
						var tmpArea:Number = ((geometry as Polygon).componentByIndex(0) as LinearRing).geodesicArea;
						tmpArea = Math.abs(tmpArea);
						if (tmpArea >= 1000000) {
							// 単位をkm2に変更
							tmpArea = tmpArea / 1000000;
							unit = "km²";
							area = Util.truncate(tmpArea, PRECISION);
						}
						else {
							// m2
							unit = "m²";
							area = Util.truncate(tmpArea, PRECISION);
						}
						caption = caption + area + " " + unit;
						
					}
					
					// 表示
					if (caption.length > 0) Alert.show(caption);
				}
			}
			
			/**
			 * Update the feature style when Mouse goes over the feature
			 * event occured
			 */
			private function onFeatureOver(evt:FeatureEvent):void
			{
				if(evt.feature.layer == this.target)
				{
					evt.feature.originalStyle = evt.feature.style;
					
					if (evt.feature is LabelFeature) {
						evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
					} else if(evt.feature is PointFeature || evt.feature is MultiPointFeature) {
						//evt.feature.style = Style.getDefaultSelectedPointStyle();
					} else if (evt.feature is LineStringFeature || evt.feature is MultiLineStringFeature) {
						evt.feature.style = Style.getDefaultSelectedLineStyle();
						(evt.feature.style.rules[0].symbolizers[0] as LineSymbolizer).stroke.width = (evt.feature.originalStyle.rules[0].symbolizers[0] as LineSymbolizer).stroke.width;
					} else {
						evt.feature.style = Style.getDefaultSelectedPolygonStyle();
						(evt.feature.style.rules[0].symbolizers[0] as PolygonSymbolizer).stroke.width = (evt.feature.originalStyle.rules[0].symbolizers[0] as PolygonSymbolizer).stroke.width;
					}
					
					evt.feature.draw();
				}
			}
			
			/**
			 * Update the feature style when mouse goes out the feature
			 * event occured
			 */
			private function onFeatureOut(evt:FeatureEvent):void
			{
				if(evt.feature.layer == this.target)
				{	
					if(evt.feature.originalStyle != null) {
						evt.feature.style = evt.feature.originalStyle;
					} else {
						if (evt.feature is LabelFeature) {
							evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
						} else if(evt.feature is PointFeature || evt.feature is MultiPointFeature) {
							//evt.feature.style = Style.getDefaultPointStyle();
						} else if (evt.feature is LineStringFeature || evt.feature is MultiLineStringFeature) {
							evt.feature.style = Style.getDefaultLineStyle();
						} else {
							evt.feature.style = Style.getDefaultPolygonStyle();
						}
					}
					
					evt.feature.draw();
				}
			}
			
			/**
			 * To activate the handler
			 */
			private function activate():void
			{
				if(this.map) {
					this._map.addEventListener(FeatureEvent.FEATURE_SELECTED, onFeatureSelected);
					this._map.addEventListener(FeatureEvent.FEATURE_OVER, onFeatureOver);
					this._map.addEventListener(FeatureEvent.FEATURE_OUT, onFeatureOut);
				}
				
				for each(var ih:IHandler in this._map.controls)
				{
					if(ih is SelectFeaturesHandler && ih != this._handler)
					{
						// Store the existing SelectFeaturesHandler
						this._previousSelectFeaturesHandler = (ih as SelectFeaturesHandler);
						(ih as SelectFeaturesHandler).map = null;
						this.map.removeControl(ih);
					}
				}
				// Add a new SelectFeaturesHandler
				if(this._hover)
					this._handler = new ExEditFeaturesHandler(this._map, true, true, false, true);
				else
					this._handler = new ExEditFeaturesHandler(this._map, true, true, false, false);
				this._handler.layers[0] = this._target;
				this._handler.clickOut = this._clickout;
				this._handler.toggle = this._toggle;
				
				_alpha = 1;
			}
			
			/**
			 * To disactivate the handler
			 */
			private function disactivate():void{
				
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.SELECT_HANDLER_DESACTIVATED);
				evt.layer = this.target;
				this.map.dispatchEvent(evt);
				
				// Manage the new SelectFeaturesHandler
				this._handler.clearSelection();
				this._handler.active = false;
				this._handler.map = null;
				this.map.removeControl(this._handler);
				
				// Add the previous SelectFeaturesHandler
				if(this._previousSelectFeaturesHandler)
					this._previousSelectFeaturesHandler.map = this.map;
				
				_alpha = 0.3;
				
				if(this.map) {
					this._map.removeEventListener(FeatureEvent.FEATURE_SELECTED, onFeatureSelected);
					this._map.removeEventListener(FeatureEvent.FEATURE_OVER, onFeatureOver);
					this._map.removeEventListener(FeatureEvent.FEATURE_OUT, onFeatureOut);
				}
				
				if(fxpopup){
					fxpopup.destroy();
				}
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.SELECT_HANDLER_ACTIVATED event
			 */
			protected function onClick():void{
				
				if(!this.target)
					return;
				
				// Disactive this component
				var evt:DrawingEvent;
				if(this._handler && this._handler.active){
					disactivate();
					return;
				}
				
				// Disactive others drawing tools components
				this._isClick = true;
				evt = new DrawingEvent(DrawingEvent.SELECT_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				this.map.dispatchEvent(evt);
				
				// Disactive mesure tools components
				evt = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = null;
				this.map.dispatchEvent(evt);
				
				// Active this component
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(this._handler && this._handler.active && !this._isClick) {
					disactivate();
					this._map.keyboardNavigationEnabled = true;
				}
				else
					this._isClick = false;
			}
			
			/**
			 * Update the target on active layer changed
			 */
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.drawingMode == 'unique')
				{
					if(this._handler && this._handler.active){
						disactivate();
						this._map.mouseNavigationEnabled = true;
						this._map.panNavigationEnabled = true;
						this._map.zoomNavigationEnabled = true;
						this._map.keyboardNavigationEnabled = true;
					}
					
					this.target = evt.layer;
					
					if(!evt.layer || !evt.layer.editable) {
						this.buttonMode = false;
						this.useHandCursor = false;
						//this.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					} else {
						this.buttonMode = true;
						this.useHandCursor = true;
						//this.toolTip = Catalog.getLocalizationForKey('drawing.select');
					}
				}
			}
			
			/**
			 * Update texts on map language changed
			 */
			public function onMapLanguageChange(event:I18NEvent):void{
				
				this.tooltip = Catalog.getLocalizationForKey('drawing.displayFeatureInfo');
			}
			
			// Unused functions
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
