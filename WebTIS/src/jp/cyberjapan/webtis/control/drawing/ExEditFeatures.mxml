<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   implements="org.openscales.core.control.IControl"
			   toolTip="{this.tooltip}"
			   icon="{_btnEdit}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			
			import org.openscales.core.Map;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.LabelFeature;
			import org.openscales.core.feature.LineStringFeature;
			import org.openscales.core.feature.MultiLineStringFeature;
			import org.openscales.core.feature.MultiPointFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.handler.IHandler;
			//import org.openscales.core.handler.feature.SelectFeaturesHandler;
			import org.openscales.core.handler.feature.draw.FeatureLayerEditionHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.style.Style;
			import org.openscales.core.style.font.Font;
			import org.openscales.core.style.symbolizer.LineSymbolizer;
			import org.openscales.core.style.symbolizer.PolygonSymbolizer;
			import org.openscales.core.style.symbolizer.TextSymbolizer;
			import org.openscales.fx.control.drawing.popup.EditLabel;
			import org.openscales.geometry.basetypes.Pixel;
			import jp.cyberjapan.webtis.handler.feature.ExSelectFeaturesHandler;
			
			[Bindable]
			private var _alpha:Number = 0.3;
			
			[Bindable]
			private var tooltip:String = Catalog.getLocalizationForKey('drawing.edit');
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/Icons-08.png")]
			private var _btnEdit:Class;
			
			private var _active:Boolean = true;
			private var _handler:FeatureLayerEditionHandler = null;
			private var _previousHandler:FeatureLayerEditionHandler = null;
			private var _selectFeaturesHandler:ExSelectFeaturesHandler;
			private var _previousSelectFeaturesHandler:ExSelectFeaturesHandler = null;
			private var _virtualStyle:Style;
			private var _map:Map;
			private var _target:VectorLayer;
			private var _isClick:Boolean = false;
			private var _drawingMode:String;
			
			//this Vector contains the real features of the layer without the temporary features drawn for modification.
			//Used for FEATURE_OVER and FEATURE_OUT event
			private var _realLayerFeatures:Vector.<Feature>;
			//Stores the feature actually selected
			private var _featureSelected:Feature;
			
			// Property needed for LabelFeature edition
			private var _popup:EditLabel; 
			private var _labelFeature:LabelFeature;

			/**
			 * Array of some features that may not be edited.
			 */
			private var _uneditableFeatures:Vector.<Feature> = new Vector.<Feature>();
			
			/**
			 * Indicates for Drawing mode
			 * multiple : tools are in the LayerSwitcher
			 * unique : tools are in the DrawingToolbar
			 */
			[Bindable]
			public function get drawingMode():String{
				
				return _drawingMode;
			}
			
			public function set drawingMode(value:String):void{
				_drawingMode = value;
			}
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(this._handler && !_active){
					_handler.active = false;
				}
			}
			
			/**
			 * Drawing style of the virtual points
			 */
			public function get virtualStyle():Style{
				
				return this._virtualStyle;
			}
			public function set virtualStyle(value:Style):void{
				
				this._virtualStyle = value;
			}
			
			/**
			 * Add an unEditable feature.
			 * 編集不可のフィーチャを追加する
			 */
			public function addUneditableFeature(feature:Feature):void
			{
				if(feature!=null){
					if (this._selectFeaturesHandler)
					{
						_selectFeaturesHandler.addUnselectableFeature(feature);
					}
					if(_uneditableFeatures.indexOf(feature)==-1)
					{
						_uneditableFeatures.push(feature);
					}
				}
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return this._map;
			}
			public function set map(value:Map):void{
				if(this._map) {
					this._map.removeEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.removeEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.removeEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.removeEventListener(DrawingEvent.DELETE_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.removeEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);

					this._map.removeEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
					this._map.removeEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
				}
				this._map = value;
				if(this._map) {
					this._map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.addEventListener(DrawingEvent.DELETE_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
					this._map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
					
					this._map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
					this._map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
				}
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be edited 
			 */
			public function get target():VectorLayer{
				
				return this._target;
			}
			
			public function set target(value:VectorLayer):void{
				
				this._target = value;
			}
			
			/**
			 * To activate the handler
			 */
			private function activate():void{
				
				for each(var ih:IHandler in this.map.controls)
				{
					if(ih is ExSelectFeaturesHandler && ih != this._selectFeaturesHandler)
					{
						// Store the existing ExSelectFeaturesHandler
						this._previousSelectFeaturesHandler = (ih as ExSelectFeaturesHandler);
						(ih as ExSelectFeaturesHandler).map = null;
						this.map.removeControl(ih);
					}
					if(ih is FeatureLayerEditionHandler)
					{
						// Store the existing FeatureLayerEditionHandler
						this._previousHandler = (ih as FeatureLayerEditionHandler);
						(ih as FeatureLayerEditionHandler).map = null;
						this.map.removeControl(ih);
					}
				}
				// Add a new ExSelectFeaturesHandler
				this._selectFeaturesHandler = new ExSelectFeaturesHandler(this.map,true,true,false,false);
				this._selectFeaturesHandler.layers[0] = this.target;
				this._selectFeaturesHandler.clickOut = false;
				this._selectFeaturesHandler.toggle = false;
				
				// Add a new FeatureLayerEditionHandler
				this._handler = new FeatureLayerEditionHandler(this.map,this.target,true);
				this._handler.virtualStyle = this._virtualStyle;
				
				
				//Storing real features
				if(_realLayerFeatures == null) {
					_realLayerFeatures = new Vector.<Feature>();
				}
				
				for each(var f:Feature in this.target.features) {
					_realLayerFeatures.push(f);
				}
				
				this._map.addEventListener(FeatureEvent.FEATURE_SELECTED, onFeatureSelected);
				this._map.addEventListener(FeatureEvent.FEATURE_UNSELECTED, onFeatureUnselected);
				this._map.addEventListener(FeatureEvent.FEATURE_OVER, onFeatureOver);
				this._map.addEventListener(FeatureEvent.FEATURE_OUT, onFeatureOut);
				
				_alpha = 1;
				
			}
			
			/**
			 * To disactivate the handler
			 */
			public function disactivate():void{
				
				var evt:DrawingEvent = new DrawingEvent(DrawingEvent.EDIT_HANDLER_DESACTIVATED);
				evt.layer = this.target;
				this.map.dispatchEvent(evt);
				
				// Manage the new FeatureLayerEditionHandler
				if (_handler)
				{
					_handler.active = false;
					this._handler.map = null;
					this.map.removeControl(this._handler);
				}
				// Add the previous FeatureLayerEditionHandler
				if(this._previousHandler)
					this._previousHandler.map = this.map;
				
				// Manage the new ExSelectFeaturesHandler
				if (this._selectFeaturesHandler)
				{
					this._selectFeaturesHandler.clearSelection();
					this._selectFeaturesHandler.map = null;
					this.map.removeControl(this._selectFeaturesHandler);
				}
				
				// Add the previous ExSelectFeaturesHandler
				if(this._previousSelectFeaturesHandler)
					this._previousSelectFeaturesHandler.map = this.map;
				
				if(this.map) {
					this._map.removeEventListener(FeatureEvent.FEATURE_SELECTED, onFeatureSelected);
					this._map.removeEventListener(FeatureEvent.FEATURE_UNSELECTED, onFeatureUnselected);
					this._map.removeEventListener(FeatureEvent.FEATURE_OVER, onFeatureOver);
					this._map.removeEventListener(FeatureEvent.FEATURE_OUT, onFeatureOut);
				}
				
				_alpha = 0.3;
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.EDIT_HANDLER_ACTIVATED event
			 */
			public function onClick():void{
				
				if(!this.target)
					return;
				
				// Disactive this component
				var evt:DrawingEvent;
				if(this._handler && this._handler.active){
					disactivate();
					return;
				}
				
				// Disactive others drawing tools components
				this._isClick = true;
				evt = new DrawingEvent(DrawingEvent.EDIT_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				this.map.dispatchEvent(evt);
				
				// Disactive mesure tools components
				evt = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = null;
				this.map.dispatchEvent(evt);
				
				// Active this component
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(this._handler && this._handler.active && !this._isClick)
					disactivate();
				else
					this._isClick = false;
			}
			
			/**
			 * Update the target on active layer changed
			 */
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.drawingMode == 'unique')
				{
					if(this._handler && this._handler.active){
						disactivate();
						this._map.mouseNavigationEnabled = true;
						this._map.panNavigationEnabled = true;
						this._map.zoomNavigationEnabled = true;
						this._map.keyboardNavigationEnabled = true;
					}
					this.target = evt.layer;
					
					if(!evt.layer || !evt.layer.editable) {
						this.buttonMode = false;
						this.useHandCursor = false;
						this.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					} else {
						this.buttonMode = true;
						this.useHandCursor = true;
						this.toolTip = Catalog.getLocalizationForKey('drawing.edit');
					}
				}
			}
			
			/**
			 * Update the features to edit when a FeatureEvent.FEATURE_SELECTED 
			 * event occured
			 * フィーチャが選択された場合
			 */
			private function onFeatureSelected(evt:FeatureEvent):void{
				
				this._selectFeaturesHandler.unselectableFeatures = null;
				this._featureSelected = evt.feature;
				if(evt.feature.layer == this.target && (evt.feature is LabelFeature)){
					_labelFeature = evt.feature as LabelFeature;
					// EX改修箇所 ポップアップをモーダルに変更（∵複数のポップアップ画面表示を避けるため）
					_popup = EditLabel(PopUpManager.createPopUp(this, EditLabel, true));
					_popup.input.text = _labelFeature.text;
					_popup.map = this.map;
					_popup.okButton.addEventListener(MouseEvent.CLICK,updateLabelFeature);
					// EX改修箇所 キャンセル時のイベントを追加
					_popup.cancelButton.addEventListener(MouseEvent.CLICK,cancelLabelFeature);
				}else{
					if(this._handler && this._handler.active)
						_handler.editionModeStop();
					
					if(this._selectFeaturesHandler)
						_handler.featuresToEdit = this._selectFeaturesHandler.selectedFeatures;
					
					if(this._handler && this._handler.active) {
						_handler.editionModeStart();
					}
				}
				var length:int = this._handler.editionVirtualVertices.length;
				for (var i:int = 0; i< length; ++i)
				{
					this._selectFeaturesHandler.addUnselectableFeature(this._handler.editionVirtualVertices[i][0]);
				}
				
			}
			
			/**
			 * @private 
			 * 
			 * Callback method to EditLabel popup. It updates feature l
			 * テキスト編集でOKボタン押下時
			 */ 
			private function updateLabelFeature(evt:MouseEvent):void{
				if(_popup.input.text != _labelFeature.text){
					_labelFeature.text = _popup.input.text;
					_labelFeature.draw();
				}
				// EX改修箇所 スタイルを元に戻す
				onFeatureUnselected(new FeatureEvent("unselected_", _labelFeature));
			}
			
			// EX改修箇所 スタイルを元に戻す
			/**
			 * テキスト編集でキャンセルボタン押下時
			 * @param	evt
			 */
			private function cancelLabelFeature(evt:MouseEvent):void{
				onFeatureUnselected(new FeatureEvent("unselected_", _labelFeature));
			}
			
			/**
			 * Update the features to edit when a
			 * FeatureEvent.FEATURE_UNSELECTED event occured
			 * フィーチャの選択が解除された場合
			 */
			private function onFeatureUnselected(evt:FeatureEvent):void{
				
				if(this._featureSelected == evt.feature) {
					this._featureSelected = null;
					// EX改修箇所
					// フィーチャ選択中に他のフィーチャを選択ドラッグすると、前のフィーチャのハイライトが解除されない問題への対策
					onFeatureOut(evt);
				}
				
				if(this._handler && this._handler.active) {
					_handler.editionModeStop();
				}
				
				if(this._selectFeaturesHandler)
					_handler.featuresToEdit = this._selectFeaturesHandler.selectedFeatures;
				
				if(this._handler && this._handler.active)
					_handler.editionModeStart();
			}
			
			/**
			 * Update the feature style when Mouse goes over the feature
			 * event occured
			 * フィーチャにマウスポインタが乗った時のイベント
			 */
			private function onFeatureOver(evt:FeatureEvent):void
			{
				
				if(this._realLayerFeatures.indexOf(evt.feature) != -1 && !(evt.feature == _featureSelected))
				{
					evt.feature.originalStyle = evt.feature.style;
					
					if (evt.feature is LabelFeature) {
						evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
					} else if(evt.feature is PointFeature || evt.feature is MultiPointFeature) {
						//evt.feature.style = Style.getDefaultSelectedPointStyle();
						// EX改修箇所 ポイントはNOP
						return;
					} else if (evt.feature is LineStringFeature || evt.feature is MultiLineStringFeature) {
						evt.feature.style = Style.getDefaultSelectedLineStyle();
						(evt.feature.style.rules[0].symbolizers[0] as LineSymbolizer).stroke.width = (evt.feature.originalStyle.rules[0].symbolizers[0] as LineSymbolizer).stroke.width;
					} else {
						evt.feature.style = Style.getDefaultSelectedPolygonStyle();
						(evt.feature.style.rules[0].symbolizers[0] as PolygonSymbolizer).stroke.width = (evt.feature.originalStyle.rules[0].symbolizers[0] as PolygonSymbolizer).stroke.width;
					}
					
					//set feature style as a selected style
					evt.feature.style.isSelectedStyle = true;
					
					evt.feature.draw();
				}
			}
			
			/**
			 * Update the feature style when mouse goes out the feature
			 * event occured
			 * フィーチャからマウスポインタが外れた時のイベント
			 */
			private function onFeatureOut(evt:FeatureEvent):void
			{
				if(this._realLayerFeatures.indexOf(evt.feature) != -1 && !(evt.feature == _featureSelected))
				{	
					if(evt.feature.originalStyle != null) {
						evt.feature.style = evt.feature.originalStyle;
					} else {
						if (evt.feature is LabelFeature) {
							evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
						} else if(evt.feature is PointFeature || evt.feature is MultiPointFeature) {
							//evt.feature.style = Style.getDefaultPointStyle();
							// EX改修箇所 ポイントはNOP
							return;
						} else if (evt.feature is LineStringFeature || evt.feature is MultiLineStringFeature) {
							evt.feature.style = Style.getDefaultLineStyle();
						} else {
							evt.feature.style = Style.getDefaultPolygonStyle();
						}
					}
					
					//set feature style as a normal style
					evt.feature.style.isSelectedStyle = false;
					
					evt.feature.draw();
				}
			}
			
			
			/**
			 * Update texts on map language changed
			 */
			public function onMapLanguageChange(event:I18NEvent):void{
				
				this.tooltip = Catalog.getLocalizationForKey('drawing.edit');
			}
			
			// Unused functions
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
