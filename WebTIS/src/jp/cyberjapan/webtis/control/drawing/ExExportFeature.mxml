<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns="org.openscales.fx.control.layer.*"
		 xmlns:os="org.openscales.fx.control.*">
	
	
	<os:IconButton id="exBtn" icon="{_btnExport}" click="{this.exportFeature()}"
				   width="22"
				   height="22" alpha="{_alpha}" />
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.IOErrorEvent;
			import flash.events.MouseEvent;
			import flash.net.FileReference;
			import jp.cyberjapan.webtis.api.LayerAPI;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.KML;
			import org.openscales.core.layer.Layer;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.Map;
			
			private var _mode:String;
			private var fileReference:FileReference;
			public static const ONLY_EXPORT:String = "only";
			public static const ALL_EXPORT:String = "all";
			private static const DEFAULT_FILE_NAME:String = "export";
			
			[Bindable]
			private var _alpha:Number = 1;
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/Icons-18.png")]
			private var _btnExport:Class;

			[Bindable]
			private var tooltipExport:String = Catalog.getLocalizationForKey('drawing.export');

			[Bindable]
			private var tooltipAllExport:String = Catalog.getLocalizationForKey('drawing.allExport');
			
			/**
			 * The VectorLayer linked to this export button
			 */
			private var _layer:VectorLayer = null;
			
			[Bindable]
			private var _map:Map = null;
			
			public function exportFeature():void
			{
				var layerAPI:LayerAPI = new LayerAPI(_map, null);
				if (_mode == ONLY_EXPORT)
				{
					if (_layer)
					{
						layerAPI.exportKML(_layer.identifier);
					}
				}
				else if(_mode == ALL_EXPORT)
				{
					layerAPI.exportAllLayers();
				}
			}
			
			/**
			 * 
			 */
			public function onExportModeChange():void 
			{
				if (_mode == ONLY_EXPORT)
				{
					exBtn.toolTip = this.tooltipExport;
				}
				else
				{
					exBtn.toolTip = this.tooltipAllExport;
					//this.tooltipExport = Catalog.getLocalizationForKey('drawing.allExport');
				}
			}

			/**
			 * Change the text values on Map Language changed
			 * @param event The I18N event received
			 */
			public function onMapLanguageChange(event:I18NEvent):void 
			{
				this.tooltipExport = Catalog.getLocalizationForKey('drawing.export');
				this.tooltipAllExport = Catalog.getLocalizationForKey('drawing.allExport');
			}
			
			private function onChangeActiveLayer(event:DrawingEvent):void{
				
				//if(this.drawingMode == 'unique')
				//{
					//this.layer = event.layer;
				//}
			}
			
			public function get map():Map{
				return this._map;
			}
			public function set map(value:Map):void{
				this._map = value;
				this._map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, this.onChangeActiveLayer);
				this._map.addEventListener(I18NEvent.LOCALE_CHANGED, this.onMapLanguageChange);
				
			}
			
			/**
			 * Layer the features will be drawn on
			 */
			public function get layer():VectorLayer
			{
				return _layer;
			}
			public function set layer(value:VectorLayer):void{
				
				_layer = value;
				if(_layer && _layer.map)
				{
					_layer.map.addEventListener(I18NEvent.LOCALE_CHANGED, this.onMapLanguageChange);
				}
			}
			
			public function get mode():String 
			{
				return _mode;
			}
			
			public function set mode(value:String):void 
			{
				_mode = value;
				onExportModeChange();
			}
		]]>
</fx:Script>	
			  
</s:Group>