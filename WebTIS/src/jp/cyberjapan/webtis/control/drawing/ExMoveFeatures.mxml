<?xml version="1.0" encoding="utf-8"?>
<os:IconButton xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:os="org.openscales.fx.control.*"
			   implements="org.openscales.core.control.IControl"
			   toolTip="{this.tooltip}"
			   icon="{_btnMove}"
			   alpha="{_alpha}"
			   width="25"
			   height="25"
			   click="onClick()"
			   enabled="{active}">
	
	<fx:Script>
		<![CDATA[
			import jp.cyberjapan.webtis.feature.CircleFeature;
			import mx.controls.Label;
			import org.openscales.core.feature.PolygonFeature;
			
			import org.openscales.core.Map;
			import org.openscales.core.control.IControl;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.FeatureEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.feature.Feature;
			import org.openscales.core.feature.LabelFeature;
			import org.openscales.core.feature.LineStringFeature;
			import org.openscales.core.feature.MultiLineStringFeature;
			import org.openscales.core.feature.MultiPointFeature;
			import org.openscales.core.feature.PointFeature;
			import org.openscales.core.handler.IHandler;
			import org.openscales.core.handler.feature.DragFeatureHandler;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.style.Style;
			import org.openscales.core.style.font.Font;
			import org.openscales.core.style.symbolizer.LineSymbolizer;
			import org.openscales.core.style.symbolizer.PolygonSymbolizer;
			import org.openscales.core.style.symbolizer.TextSymbolizer;
			import org.openscales.fx.control.layer.LayerManager;
			import org.openscales.geometry.Point;
			import org.openscales.geometry.basetypes.Location;
			import org.openscales.geometry.basetypes.Pixel;
			
			[Bindable]
			private var _alpha:Number = 0.3;
			
			[Bindable]
			private var tooltip:String = Catalog.getLocalizationForKey('drawing.move');
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/Icons-10.png")]
			private var _btnMove:Class;
			
			private var _active:Boolean = true;
			private var _handler:DragFeatureHandler = new DragFeatureHandler();
			private var _isClick:Boolean = false;
			private var _drawingMode:String;
			private var _draging:Boolean = false;
			private var _labelOver:Boolean = false;
			
			/**
			 * Indicates for Drawing mode
			 * multiple : tools are in the LayerSwitcher
			 * unique : tools are in the DrawingToolbar
			 */
			[Bindable]
			public function get drawingMode():String{
				
				return _drawingMode;
			}
			
			public function set drawingMode(value:String):void{
				_drawingMode = value;
			}
			
			/**
			 * The drag feature Handler
			 */
			public function get handler():DragFeatureHandler
			{
				return this._handler;
			}
			
			/**
			 * Flag for activating and deactivating the component
			 * @default true;
			 */
			[Bindable]
			public function get active():Boolean{
				
				return _active;
			}
			public function set active(value:Boolean):void{
				
				_active = value;
				if(! _active){
					_handler.active = false;
				}
			}
			
			/**
			 * Map controled by this control
			 */
			public function get map():Map{
				
				return _handler.map;
			}
			public function set map(value:Map):void{
				
				_handler.map = value;
				_handler.map.addEventListener(DrawingEvent.DRAW_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.EDIT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.MOVE_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.DELETE_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.SELECT_HANDLER_ACTIVATED, onChangeActiveHandler);
				_handler.map.addEventListener(DrawingEvent.CHANGE_ACTIVE_LAYER, onChangeActiveLayer);
				_handler.map.addEventListener(I18NEvent.LOCALE_CHANGED, onMapLanguageChange);
			}
			
			/**
			 * Position (x,y) of the handler
			 */
			public function get position():Pixel{
				
				return new Pixel(x,y);
			}
			public function set position(value:Pixel):void{
				
				if(value){
					x = value.x;
					y = value.y;
				}
			}
			
			/**
			 * Layer the features will be moved
			 */
			public function get target():VectorLayer{
				
				return _handler.layerToMove;
			}
			public function set target(value:VectorLayer):void{
				
				_handler.layerToMove = value;
			}
			
			/**
			 * To activate or disactivate the handler
			 */
			private function activate():void{
				
				if (_handler)
				{
					_handler.active = true;
					
					if(_handler.map) {
						_handler.map.addEventListener(FeatureEvent.FEATURE_OVER, onFeatureOver);
						_handler.map.addEventListener(FeatureEvent.FEATURE_OUT, onFeatureOut);
						//_handler.map.addEventListener(FeatureEvent.FEATURE_MOUSEMOVE, onFeatureOver);
						_handler.map.addEventListener(FeatureEvent.FEATURE_DRAG_START, toogleDrag);
						_handler.map.addEventListener(FeatureEvent.FEATURE_DRAG_STOP, toogleDrag);
					}
				}
				_alpha = 1;
				
			}
			public function disactivate():void{
				
				if (_handler)
				{
					_handler.active = false;
					
					if(_handler.map) {
						
						var evt:DrawingEvent = new DrawingEvent(DrawingEvent.MOVE_HANDLER_DESACTIVATED);
						_handler.map.dispatchEvent(evt);
						
						_handler.map.removeEventListener(FeatureEvent.FEATURE_DRAG_START, toogleDrag);
						_handler.map.removeEventListener(FeatureEvent.FEATURE_DRAG_STOP, toogleDrag);
						_handler.map.removeEventListener(FeatureEvent.FEATURE_OVER, onFeatureOver);
						_handler.map.removeEventListener(FeatureEvent.FEATURE_OUT, onFeatureOut);
						//_handler.map.removeEventListener(FeatureEvent.FEATURE_MOUSEMOVE, onFeatureOver);
					}
				}
				_alpha = 0.3;
				
				
			}
			
			public function toogleDrag(evt:FeatureEvent):void {
				this._draging = !this._draging;
				
				if (!this._draging && evt.feature is LabelFeature && this._labelOver)
				{
					this._labelOver = false;
					evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
					evt.feature.draw();
				}
				if (!this._draging && evt.feature is CircleFeature)
				{
					(evt.feature as CircleFeature).setNewGeometry();
					evt.feature.draw();
				}
			}
			
			/**
			 * Update the feature style when Mouse goes over the feature
			 * event occured
			 */
			private function onFeatureOver(evt:FeatureEvent):void
			{
				if(this._draging) {
					if (evt.feature is LabelFeature) {
						this._labelOver = false;
					}
					return;
				}
				
				if(evt.feature.layer == this.target)
				{
					// Ex改修 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
					if (!evt.feature.originalStyle || evt.feature.style != evt.feature.originalStyle)
					//if (!evt.feature.originalStyle || evt.feature.style == evt.feature.originalStyle)
					// ここまで <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
					{
						evt.feature.originalStyle = evt.feature.style;
					}
					if (evt.feature is LabelFeature) {
						evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
					} else if(evt.feature is PointFeature || evt.feature is MultiPointFeature) {
						//evt.feature.style = Style.getDefaultSelectedPointStyle();
					} else if (evt.feature is LineStringFeature || evt.feature is MultiLineStringFeature) {
						evt.feature.style = Style.getDefaultSelectedLineStyle();
						(evt.feature.style.rules[0].symbolizers[0] as LineSymbolizer).stroke.width = (evt.feature.originalStyle.rules[0].symbolizers[0] as LineSymbolizer).stroke.width;

					} else {
						evt.feature.style = Style.getDefaultSelectedPolygonStyle();
						(evt.feature.style.rules[0].symbolizers[0] as PolygonSymbolizer).stroke.width = (evt.feature.originalStyle.rules[0].symbolizers[0] as PolygonSymbolizer).stroke.width;
					}
					
					evt.feature.draw();
				}
			}
			
			/**
			 * Update the feature style when mouse goes out the feature
			 * event occured
			 */
			private function onFeatureOut(evt:FeatureEvent):void
			{
				if(this._draging) {
					if (evt.feature is LabelFeature) {
						this._labelOver = true;
					}
					return;
				}
				
				if(evt.feature.layer == this.target)
				{	
					if(evt.feature.originalStyle != null && !(evt.feature is PointFeature)) {
						evt.feature.style = evt.feature.originalStyle;
					} else {
						if (evt.feature is LabelFeature) {
							evt.feature.style = Style.getNegativeLabelStyle(evt.feature.style);
						} else if(evt.feature is PointFeature || evt.feature is MultiPointFeature) {
							//evt.feature.style = Style.getDefaultPointStyle();
						} else if (evt.feature is LineStringFeature || evt.feature is MultiLineStringFeature) {
							evt.feature.style = Style.getDefaultLineStyle();
						} else {
							evt.feature.style = Style.getDefaultPolygonStyle();
						}
					}
					
					evt.feature.draw();
				}
			}
			
			/**
			 * On button click, dispatch a DrawingEvent.MOVE_HANDLER_ACTIVATED event
			 */
			public function onClick():void{
				
				if(!this.target)
					return;
				
				// Disactive this component
				var evt:DrawingEvent;
				if(this._handler.active){
					
					disactivate();
					return;
				}
				
				// Disactive others drawing tools components
				this._isClick = true;
				evt = new DrawingEvent(DrawingEvent.MOVE_HANDLER_ACTIVATED);
				evt.activeHandler = this.id;
				evt.layer = this.target;
				_handler.map.dispatchEvent(evt);
				
				// Disactive mesure tools components
				evt = new DrawingEvent(DrawingEvent.CHANGE_ACTIVE_HANDLER);
				evt.activeHandler = null;
				_handler.map.dispatchEvent(evt);
				
				// Active this component
				activate();
			}
			
			/**
			 * Check the handler when a DrawingEvent.DRAW_HANDLER_ACTIVATED or
			 * DrawingEvent.EDIT_HANDLER_ACTIVATED or DrawingEvent.MOVE_HANDLER_ACTIVATED
			 * or DrawingEvent.SELECT_HANDLER_ACTIVATED event occured
			 */
			private function onChangeActiveHandler(evt:DrawingEvent):void{
				
				if(this._handler.active && !this._isClick)
					disactivate();
				else
					this._isClick = false;
			}
			
			/**
			 * Update the target on active layer changed
			 */
			private function onChangeActiveLayer(evt:DrawingEvent):void{
				
				if(this.drawingMode == 'unique')
				{
					if(this._handler.active){
						disactivate();
						_handler.map.mouseNavigationEnabled = true;
						_handler.map.panNavigationEnabled = true;
						_handler.map.zoomNavigationEnabled = true;
						_handler.map.keyboardNavigationEnabled = true;
					}
					this.target = evt.layer;
					
					if(!evt.layer || !evt.layer.editable) {
						this.buttonMode = false;
						this.useHandCursor = false;
						this.toolTip = Catalog.getLocalizationForKey('drawing.selectDrawingLayer');
					} else {
						this.buttonMode = true;
						this.useHandCursor = true;
						this.toolTip = Catalog.getLocalizationForKey('drawing.move');
					}
				}
			}
			
			/**
			 * Update texts on map language changed
			 */
			public function onMapLanguageChange(event:I18NEvent):void{
				
				this.tooltip = Catalog.getLocalizationForKey('drawing.move');
			}
			
			// Unused functions
			public function draw():void{
				
				this.invalidateDisplayList();
			}
			public function destroy():void{}
		]]>
	</fx:Script>			
</os:IconButton>
