<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns="org.openscales.fx.control.layer.*"
		 xmlns:os="org.openscales.fx.control.*">
	
	
	<os:IconButton id="saveHtmlBtn" icon="{_btnSaveHtml}" toolTip="{this.tooltipExport}" click="{this.saveAsHTML()}"
				   width="22"
				   height="22" alpha="{_alpha}" />
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.IOErrorEvent;
			import flash.events.MouseEvent;
			import flash.net.FileReference;
			import jp.cyberjapan.webtis.api.LayerAPI;
			import jp.cyberjapan.webtis.api.MapAPI;
			import jp.cyberjapan.webtis.components.SaveHTML;
			import jp.cyberjapan.webtis.components.TISMap;
			import org.openscales.core.events.DrawingEvent;
			import org.openscales.core.events.I18NEvent;
			import org.openscales.core.i18n.Catalog;
			import org.openscales.core.layer.KML;
			import org.openscales.core.layer.Layer;
			import org.openscales.core.layer.VectorLayer;
			import org.openscales.core.Map;
			import mx.controls.Alert;
			import org.openscales.geometry.basetypes.Location;
			
			private var _mode:String;
			private var fileReference:FileReference;
			
			[Bindable]
			private var _alpha:Number = 1;
			
			[Bindable]
			[Embed(source="../../../../../../assets/images/savehtml.png")]
			private var _btnSaveHtml:Class;

			[Bindable]
			private var tooltipExport:String = Catalog.getLocalizationForKey('drawing.tooltiphtml');

			/**
			 * The VectorLayer linked to this export button
			 */
			private var _layer:VectorLayer = null;
			
			[Bindable]
			private var _map:Map = null;
			
			public function saveAsHTML():void
			{
				var baseMap:Layer = this._map.getLayerByIdentifier(MapAPI.BASE_MAP_IDENTIFIER);
				if (baseMap == null) {
					Alert("ベースマップがないため保存できません。");
					return;
				}
				var center:Location = this._map.center.reprojectTo(MapAPI.DISPLAY_PROJECTION);
				var lat:Number = center.lat;
				var lon:Number = center.lon;
				var zoomLevel:Number = (baseMap as TISMap).getZoomForResolution(this._map.resolution.value);
			
				var metaData:Object = (baseMap as TISMap).getCurrentMetadata(zoomLevel);
				var did:String = "JAIS";
				if (metaData != null) {
					did = metaData.dataId;
				}
			
				// 保存用のデータを作成
				var saveHTML:SaveHTML = new SaveHTML();
				var str:String = saveHTML.save(this._map, lat, lon, zoomLevel, did);
				trace(str);
			
				// ローカルにファイル保存
				var fileReference:FileReference = new FileReference();			
				try {
					fileReference.save(str, SaveHTML.SAVEHTML_SAVEFILE_NAME);
				}
				catch (err:Error) {
					Alert.show("err : " + err.message);	// error 2176 こわい
				}
			}
			
			/**
			 * Change the text values on Map Language changed
			 * @param event The I18N event received
			 */
			public function onMapLanguageChange(event:I18NEvent):void 
			{
				this.tooltipExport = Catalog.getLocalizationForKey('drawing.tooltiphtml');
			}
			
			public function get map():Map{
				return this._map;
			}
			public function set map(value:Map):void{
				this._map = value;
				this._map.addEventListener(I18NEvent.LOCALE_CHANGED, this.onMapLanguageChange);
				
			}
		]]>
</fx:Script>	
			  
</s:Group>